{
  "info": {
    "name": "TaxingCRM API Collection",
    "description": "Complete API collection for TaxingCRM application with Firebase Authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('userId', response.userId);",
                  "    pm.test('Registration successful', function () {",
                  "        pm.expect(response.message).to.include('registered successfully');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@test.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"Admin\",\n  \"phone\": \"+1234567890\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new admin user. After this, you'll need to verify the phone number using Firebase OTP."
          }
        },
        {
          "name": "Register Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('userId', response.userId);",
                  "    pm.test('Registration successful', function () {",
                  "        pm.expect(response.message).to.include('registered successfully');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"client@test.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"Client\",\n  \"phone\": \"+1987654321\",\n  \"role\": \"client\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new client user. After this, you'll need to verify the phone number using Firebase OTP."
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    // Extract auth token from cookies if available",
                  "    const cookies = pm.cookies.all();",
                  "    const authCookie = cookies.find(cookie => cookie.name === 'auth-token');",
                  "    if (authCookie) {",
                  "        pm.collectionVariables.set('authToken', authCookie.value);",
                  "    }",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.message).to.include('Login successful');",
                  "        pm.expect(response.user).to.have.property('role');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@taxingcrm.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with email and password. This will directly authenticate the user if phone is already verified during registration."
          }
        },
        {
          "name": "Complete Phone Verification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    // Extract auth token from cookies if available",
                  "    const cookies = pm.cookies.all();",
                  "    const authCookie = cookies.find(cookie => cookie.name === 'auth-token');",
                  "    if (authCookie) {",
                  "        pm.collectionVariables.set('authToken', authCookie.value);",
                  "    }",
                  "    pm.test('Phone verification completed successfully', function () {",
                  "        pm.expect(response.message).to.include('completed successfully');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"firebaseUid\": \"firebase-user-id-from-client\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/complete-verification",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "complete-verification"]
            },
            "description": "Complete phone verification after Firebase authentication. This works for both registration and completing verification for existing unverified users."
          }
        },
        {
          "name": "Resend OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/resend-otp",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "resend-otp"]
            },
            "description": "Resend OTP (Note: With Firebase, this is handled on the client side)"
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout user and clear authentication cookies"
          }
        }
      ],
      "description": "Authentication endpoints for user registration, login, OTP verification, and logout"
    },
    {
      "name": "Database Seeding",
      "item": [
        {
          "name": "Seed Database",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Database seeded successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('seeded successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/seed",
              "host": ["{{baseUrl}}"],
              "path": ["api", "seed"]
            },
            "description": "Seed the database with default service types and admin user. Only works in development mode."
          }
        }
      ],
      "description": "Database initialization and seeding"
    },
    {
      "name": "Service Types",
      "item": [
        {
          "name": "Get Service Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Service types retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.serviceTypes).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/service-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "service-types"]
            },
            "description": "Get all active service types. Requires authentication."
          }
        },
        {
          "name": "Create Service Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Service type created successfully', function () {",
                  "        pm.expect(response.message).to.include('created successfully');",
                  "        pm.expect(response.serviceType).to.have.property('name');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Custom Tax Service\",\n  \"description\": \"Custom tax preparation service\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/service-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "service-types"]
            },
            "description": "Create a new service type. Requires admin authentication."
          }
        }
      ],
      "description": "Service type management endpoints"
    },
    {
      "name": "Clients",
      "item": [
        {
          "name": "Get All Clients",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Clients retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.clients).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/clients",
              "host": ["{{baseUrl}}"],
              "path": ["api", "clients"]
            },
            "description": "Get all clients. Requires admin authentication."
          }
        }
      ],
      "description": "Client management endpoints (admin only)"
    },
    {
      "name": "Projects",
      "item": [
        {
          "name": "Get All Projects",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Projects retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.projects).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/projects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"]
            },
            "description": "Get projects. Admins see all projects, clients see only their own projects."
          }
        },
        {
          "name": "Create Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('projectId', response.project._id);",
                  "    pm.test('Project created successfully', function () {",
                  "        pm.expect(response.message).to.include('created successfully');",
                  "        pm.expect(response.project).to.have.property('name');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"2024 Tax Return\",\n  \"description\": \"Individual tax return for 2024\",\n  \"clientId\": \"CLIENT_USER_ID_HERE\",\n  \"serviceTypes\": [],\n  \"priority\": \"Medium\",\n  \"dueDate\": \"2024-04-15T00:00:00.000Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/projects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"]
            },
            "description": "Create a new project. Requires admin authentication. Replace CLIENT_USER_ID_HERE with actual client ID."
          }
        },
        {
          "name": "Get Project by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Project retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.project).to.have.property('name');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects", "{{projectId}}"]
            },
            "description": "Get a specific project by ID. Clients can only access their own projects."
          }
        },
        {
          "name": "Update Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Project updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('updated successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"In Progress\",\n  \"description\": \"Updated project description\",\n  \"priority\": \"High\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects", "{{projectId}}"]
            },
            "description": "Update a project. Requires admin authentication. Available statuses: 'Info Received', 'In Progress', 'Waiting', 'Completed'"
          }
        },
        {
          "name": "Delete Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Project deleted successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('deleted successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects", "{{projectId}}"]
            },
            "description": "Soft delete a project (sets isActive to false). Requires admin authentication."
          }
        }
      ],
      "description": "Project management endpoints"
    },
    {
      "name": "Notes",
      "item": [
        {
          "name": "Get Project Notes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Notes retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.notes).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/notes?projectId={{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notes"],
              "query": [
                {
                  "key": "projectId",
                  "value": "{{projectId}}"
                }
              ]
            },
            "description": "Get notes for a specific project. Clients see only notes visible to them, admins see all notes."
          }
        },
        {
          "name": "Create Note (Admin - Internal)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Note created successfully', function () {",
                  "        pm.expect(response.message).to.include('created successfully');",
                  "        pm.expect(response.note).to.have.property('content');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"projectId\": \"{{projectId}}\",\n  \"content\": \"Internal note: Client documents received and reviewed.\",\n  \"isVisibleToClient\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notes"]
            },
            "description": "Create an internal note (not visible to client). Requires admin authentication."
          }
        },
        {
          "name": "Create Note (Admin - Client Visible)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Note created successfully', function () {",
                  "        pm.expect(response.message).to.include('created successfully');",
                  "        pm.expect(response.note).to.have.property('content');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"projectId\": \"{{projectId}}\",\n  \"content\": \"Your tax return is being processed. We'll contact you if we need additional information.\",\n  \"isVisibleToClient\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notes"]
            },
            "description": "Create a note visible to the client. Requires admin authentication."
          }
        },
        {
          "name": "Create Note (Client)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Note created successfully', function () {",
                  "        pm.expect(response.message).to.include('created successfully');",
                  "        pm.expect(response.note).to.have.property('content');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "auth-token={{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"projectId\": \"{{projectId}}\",\n  \"content\": \"I have additional documents to submit for this tax return.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notes"]
            },
            "description": "Create a note from client. Client notes are automatically visible to admins."
          }
        }
      ],
      "description": "Note management endpoints for project communication"
    }
  ]
}
